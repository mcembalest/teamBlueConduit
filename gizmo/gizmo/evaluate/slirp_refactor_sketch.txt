

def run_pipeline_for_client():
    client_name,
    train,
    evaluate,
    predict,
    data_dir='data',
    model_dir='models',
    metrics_dir='metrics',
):

    client_config = get_client_config(client_name, yaml_path='default', override_key_values=None)

    X, y = get_data(
        client_name=client_name,
        target_col=client_config["target_col"]
    )

    models_generator = get_models(client_name=client_name, client_config=client_config)


    if train:
        log.info("Training")

        for model_name, model in models_generator:

            model.fit(X, y)

            save_model(
                model,
                client_name=client_name,
                model_name=model_name,
                model_dir=model_dir
            )

    if predict:
        log.info("Predicting")

        model = load_model(client_config["saved_model_path"])
        y_hat, y_score = get_y_score(X, y, model)

        save_predictions(client_config, X, y_hat, y_score, model_name)

    if evaluate:
        log.info("Evaluating models")

        for cv_strategy in cv_strategies:
            for model_name, model in models_generator:
                cv_splitter = get_cv_splitter(client_config, cv_strategy)

                eval_results = eval_classifier(
                    model_name=model_name,
                    model=model,
                    X=X,
                    y=y,
                    cv_splitter=cv_splitter
                )

    if ship:
        metrics = load_metrics()
        sanity_check(metrics)
        if quality_check(metrics):
            generate_aggregate_map_layer()
            upload_stuff_to_db()
        # take whatever's come from save_predictions(),
        # generate aggregate map layer
